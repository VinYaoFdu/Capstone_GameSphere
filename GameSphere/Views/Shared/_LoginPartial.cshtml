@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment WebHostEnvironment

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    var user = await UserManager.GetUserAsync(User);
        var uploadsDirectory = Url.Content("~/uploads/");
        var avatarFileName = $"{user.Id}_avatar";

        string[] extensions = { ".jpg", ".png", ".jpeg" };
        string avatarPath = GetAvailableAvatarPath(uploadsDirectory, avatarFileName, extensions);

        <li class="nav-item">
            <img src="@Url.Content(avatarPath)" alt="Avatar" width="40" height="40" class="nav-avatar" style="border-radius:50%" />
        </li>

    <li class="nav-item">
        <a  class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity?.Name!</a>
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>

@functions {
    private string GetAvailableAvatarPath(string uploadsDirectory, string avatarFileName, string[] extensions)
    {
        foreach (var extension in extensions)
        {
            var avatarPath = $"{uploadsDirectory}{avatarFileName}{extension}";
            if (System.IO.File.Exists(WebHostEnvironment.WebRootPath + avatarPath))
            {
                return avatarPath;
            }
        }

        return "";
    }
}
